#!/data/data/com.termux/files/usr/bin/bash
# Versi otomatis berdasarkan Git
VERSION=$(git describe --tags --always 2>/dev/null || echo "v0.0.0-dev")

# Cek apakah ingin menampilkan versi saja
if [[ "$1" == "--version" || "$1" == "-v" ]]; then
    echo "ADYT version $VERSION"
    exit 0
fi

figlet "YT Downloader"
echo "ADYT Downloader $VERSION"

# Respon berdasarkan pola percobaan
declare -A RESPON_PEMBUKA=(
    ["x"]="Kenapa kosong? Coba isi dulu, ya."
    ["?"]="Hmm... itu bukan URL YouTube, lho."
)

declare -A RESPON_TENGAH=(
    ["xx"]="Masih kosong juga. Ayo, jangan malu-malu~"
    ["x?"]="Baru saja kosong, sekarang salah URL."
    ["?x"]="Tadi salah, sekarang malah kosong?"
    ["??"]="Dua kali salah, coba lebih hati-hati ya."
)

declare -A RESPON_PENUTUP=(
    ["xxx"]="Tiga kali kosong... Yuri sedih... "
    ["xx?"]="Akhirnya salah juga. Yuri nyerah, deh."
    ["x?x"]="Maju mundur... tapi tetap belum benar."
    ["x??"]="Salah dua kali, yuk belajar dulu."
    ["?xx"]="Awalnya salah, lalu dua kali kosong..."
    ["?x?"]="Salah, kosong, lalu salah lagi. Aduh..."
    ["??x"]="Akhirnya benar? Eh, ternyata masih kosong."
    ["???"]="Tiga kali salah URL. Yuri menyerah."
)
# Inisialisasi log percobaan
polanya=""

# Loop maksimum 3 kali
for ((i = 1; i <= 3; i++)); do
    read -p "Masukkan URL YouTube: " YTURL

    if [[ -z "$YTURL" ]]; then
        polanya+="x"
    elif ! echo "$YTURL" | grep -Eq '^https?://(www\.)?(youtube\.com|youtu\.be)/'; then
        polanya+="?"
    else
        break  # input valid
    fi

    # Tampilkan respon berdasarkan percobaan
    if [[ $i == 1 ]]; then
        [[ -v RESPON_PEMBUKA["${polanya:0:1}"] ]] && echo "${RESPON_PEMBUKA[${polanya:0:1}]}"
    elif [[ $i == 2 ]]; then
        [[ -v RESPON_TENGAH["${polanya:0:2}"] ]] && echo "${RESPON_TENGAH[${polanya:0:2}]}"
    else
        [[ -v RESPON_PENUTUP["${polanya:0:3}"] ]] && echo "${RESPON_PENUTUP[${polanya:0:3}]}"
        echo "Percobaan gagal. Program berhenti."
        exit 1
    fi
done

clear

echo "Mengambil daftar kualitas dari $YTURL..."
yt-dlp -F "$YTURL" > "$HOME/.yt_formats.txt"
# ===== TAMPILKAN VIDEO =====
echo "╔════════════════════════════════════════╗"
echo "║              FORMAT VIDEO              ║"
echo "╠════╦═════╦═══════════╦═════╦═══════════╣"
echo "║ No ║ ID  ║ Resolusi  ║ FPS ║   Size    ║"
echo "╠════╬═════╬═══════════╬═════╬═══════════╣"
awk '
/video only/ {
    no+=1
    id=$1
    res=$3
    fps=$4
    size="?"
    for (i=1;i<=NF;i++) {
        if ($i ~ /MiB/ || $i ~ /KiB/) {
            size=$i
            break
        }
    }
    printf "║ %-2d ║ %-3s ║ %-9s ║ %-3s ║ %-9s ║\n", no, id, res, fps, size
    map[no]=id
}
END { 
     print "╚════╩═════╩═══════════╩═════╩═══════════╝"
     for (i in map) print map[i] > "'$HOME'/.vid_id_map.txt" }
' "$HOME/.yt_formats.txt"

read -p "Pilih nomor video (kosongkan jika ingin audio saja): " VIDNUM
VIDFORMAT=""
if [ -n "$VIDNUM" ]; then
    VIDFORMAT=$(sed -n "${VIDNUM}p" "$HOME/.vid_id_map.txt")
fi

# ===== TAMPILKAN AUDIO =====
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                          FORMAT AUDIO                          ║"
echo "╠════╦═════╦═══════════════╦═════════════════╦═══════════════════╣"
echo "║ No ║ ID  ║ Total Bitrate ║ Average Bitrate ║ Audio Sample Rate ║"
echo "╠════╬═════╬═══════════════╬═════════════════╬═══════════════════╣"
awk '
BEGIN {
    FS = " +"
    no = 0
    found_header = 0
}
# Temukan posisi kolom dari header
/^ID[ \t]+EXT/ {
    for (i = 1; i <= NF; i++) {
        if ($i == "ID") id_col = i
        else if ($i == "TBR") tbr_col = i
        else if ($i ~ /ABR/) abr_col = i
        else if ($i == "ASR") asr_col = i
    }
    found_header = 1
    next
}

# Proses baris setelah header, hanya jika semua kolom tersedia
found_header && /audio only/ {
    id  = (id_col ? $id_col : "")
    tbr = (tbr_col ? $tbr_col : "")
    abr = (abr_col ? $abr_col : "")
    asr_raw = (asr_col ? $asr_col : "")

    # Konversi ASR misalnya 44k menjadi 44100 Hz
        if (asr_raw ~ /^[0-9]+k$/) {
            rate = substr(asr_raw, 1, length(asr_raw)-1)
            asr = rate * 1000 " Hz"
        } else {
            asr = "?"
        }

    # Cek apakah semua field terisi
    if (id != "" && tbr != "" && abr != "" && asr != "") 
    {
        no++
        abr_display = abr
        gsub(/k$/, " kbps", abr_display)
 	    tbr_display = tbr
	    gsub(/k$/, " kbps", tbr_display)
        printf "║ %-2d ║ %-3s ║ %-13s ║ %-15s ║ %-17s ║\n", no, id, tbr_display, abr_display, asr
        map[no] = id
    }
}

END {
	 print "╚════╩═════╩═══════════════╩═════════════════╩═══════════════════╝"
    for (i in map)
        print map[i] > "'$HOME'/.aud_id_map.txt"
}
' "$HOME/.yt_formats.txt"

read -p "Pilih nomor audio: " AUDNUM
AUDFORMAT=$(sed -n "${AUDNUM}p" "$HOME/.aud_id_map.txt")

if [ -z "$AUDFORMAT" ]; then
    echo "Audio tidak dipilih. Keluar."
    exit 1
fi

# ===== GABUNGKAN FORMAT =====
if [ -n "$VIDFORMAT" ]; then
    FORMAT="${VIDFORMAT}+${AUDFORMAT}"
else
    FORMAT="$AUDFORMAT"
fi

# ===== FORMAT OUTPUT =====
echo
echo "========== PILIH FORMAT OUTPUT =========="
echo "1) mp4"
echo "2) webm"
echo "3) mp3 (audio saja)"
read -p "Pilih: " OUTEXT

case $OUTEXT in
    1) EXT="mp4" ;;
    2) EXT="webm" ;;
    3) EXT="mp3" ;;
    *) echo "Pilihan tidak valid. Default ke mp4."; EXT="mp4" ;;
esac

# ===== LOKASI SIMPAN =====
TEMPPATH="$HOME/downloads/yt"
mkdir -p "$TEMPPATH"

# ===== MULAI DOWNLOAD =====
echo "Download ke: $TEMPPATH (format: $EXT)"
yt-dlp -f "$FORMAT" -o "$TEMPPATH/%(title).100s.%(ext)s" \
         --merge-output-format "$EXT" --external-downloader aria2c \
         --external-downloader-args aria2c:"-x 16 -s 16 -k 1M" --no-warnings "$YTURL"


FILENAME=$(yt-dlp -f "$FORMAT" -o "$TEMPPATH/%(title).100s.%(ext)s" \
           --merge-output-format "$EXT" --print filename "$YTURL")

BASE="$HOME/storage/shared/"
while true; do
    CHOICE=$(find "$BASE" -maxdepth 1 -mindepth 1 -type d ! -name ".*" | fzf --prompt="Pilih folder di: $BASE ")

    # Jika tidak ada pilihan (user tekan Esc), keluar dari loop
    if [ -z "$CHOICE" ]; then
        break
    fi

    # Set folder yang dipilih sebagai base baru untuk iterasi berikutnya
    BASE="$CHOICE"
done

SAVEPATH="$BASE"
echo "Folder akhir: $SAVEPATH"

# Jika tidak dipilih (misalnya tekan Esc), gunakan default
if [ -z "$SAVEPATH" ]; then
    SAVEPATH="$HOME/downloads/yt"
fi

mkdir -p "$SAVEPATH"
#pindahkan ke path yg dipilih
mv "$FILENAME" "$SAVEPATH"

# ===== BERSIHKAN SEMENTARA =====
rm -f "$HOME/.yt_formats.txt" "$HOME/.vid_id_map.txt" "$HOME/.aud_id_map.txt"
